name: CI Reusable workflow

on:
  workflow_call:

  workflow_dispatch:

env:
  REPOS_TOKEN: ${{ secrets.MG_TOKEN }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  POSTMAN_API_KEY: ${{ secrets.POSTMAN_API_KEY }}
  GH_TOKEN: ${{ github.token }}
  REPO_NAME: ${{ github.event.repository.name }}
  APP_ARGS: 'http://localhost:8081 http://localhost:8082 http://localhost:8083'

jobs:
  build_test_release_job:

    runs-on: ubuntu-22.04
    
    name: Build Test and Release
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          
      - name: Building with Maven and Inspecting code with SonarCloud
        run: |
          mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.token=${{ env.SONAR_TOKEN }}  

      # - name: Building environment
      #   run: | 
      #     gh repo clone ORT-DevOps-2023S2G1/orders-service
      #     mvn -f orders-service/ -B package
      #     java -jar orders-service/target/orders-service-example.jar ${{ env.APP_ARGS }} --server.port=8080 &
      #     gh repo clone ORT-DevOps-2023S2G1/payments-service
      #     mvn -f payments-service/ -B package
      #     java -jar payments-service/target/payments-service-example.jar --server.port=8081 &
      #     gh repo clone ORT-DevOps-2023S2G1/shipping-service
      #     mvn -f shipping-service/ -B package
      #     java -jar shipping-service/target/shipping-service-example.jar --server.port=8082 &
      #     gh repo clone ORT-DevOps-2023S2G1/products-service
      #     mvn -f products-service/ -B package
      #     java -jar products-service/target/products-service-example.jar --server.port=8083 &


      # - name: Install Postman CLI
      #   run: curl -o- "https://dl-cli.pstmn.io/install/linux64.sh" | sh

      # - name: Login to Postman CLI
      #   run:  postman login --with-api-key ${{ env.POSTMAN_API_KEY }}

      # - name: Get JSON file with postman collection
      #   run: |
      #     curl -H 'Authorization: token ${{ env.REPOS_TOKEN }}' \
      #     -H 'Accept: application/vnd.github.v3.raw' \
      #     -O \
      #     -L 'https://api.github.com/repos/ORT-DevOps-2023S2G1/workflows-repository/contents/DevOps-ApiCollection.postman_collection_v2.json' 
          
      # - name: Run API tests using Postman CLI
      #   run: postman collection run DevOps-ApiCollection.postman_collection_v2.json

      # - name: Wait for approval
      #   uses: ORT-DevOps-2023S2G1/manual-approval@develop
      #   with:
      #     secret: ${{ secrets.GITHUB_TOKEN }}
      #     approvers: mgonzalezgallo

      - name: Upload Artifact with JAR file
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.REPO_NAME }}-JAR-${{ github.sha }}
          path: target/${{ env.REPO_NAME }}-example.jar

      - name: chequeos
        run: |
          ls

  build_push_docker_image_with_args:
    needs: build_test_release_job
    if: github.event.repository.name == 'orders-service'
    
    runs-on: ubuntu-22.04
    
    name: Build Docker Image with args
    steps:
      
      - name: Get Dockerfile
        run: |
          curl -H 'Authorization: token ${{ env.REPOS_TOKEN }}' \
          -H 'Accept: application/vnd.github.v3.raw' \
          -O \
          -L 'https://api.github.com/repos/ORT-DevOps-2023S2G1/workflows-repository/contents/Dockerfile'

      - name: Download artifact with JAR file
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.REPO_NAME }}-JAR-${{ github.sha }}

      - name: chequeo
        run: |
          ls

      - name: Build the Docker image
        run: |
          echo ${{ env.REPOS_TOKEN }} | docker login ghcr.io -u mgonzalezgallo --password-stdin
          docker build --build-arg JAR_FILE=${{ env.REPO_NAME }}-example.jar -t ghcr.io/ort-devops-2023s2g1/${{ env.REPO_NAME }}-example:${{ github.sha }} . --file Dockerfile_args
          docker images
          docker push ghcr.io/ort-devops-2023s2g1/${{ env.REPO_NAME }}-example:${{ github.sha }}

      
  build_push_docker_image_without_args:
    needs: build_test_release_job
    if: github.event.repository.name != 'orders-service'
    
    runs-on: ubuntu-22.04
    
    name: Build Docker Image without args
    steps:
      
      - name: Get Dockerfile
        run: |
          curl -H 'Authorization: token ${{ env.REPOS_TOKEN }}' \
          -H 'Accept: application/vnd.github.v3.raw' \
          -O \
          -L 'https://api.github.com/repos/ORT-DevOps-2023S2G1/workflows-repository/contents/Dockerfile'

      - name: Download artifact with JAR file
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.REPO_NAME }}-JAR-${{ github.sha }}
          
      # - name: Build the Docker image
      #   run: |
      #     echo ${{ env.REPOS_TOKEN }} | docker login ghcr.io -u mgonzalezgallo --password-stdin
      #     docker build --build-arg JAR_FILE=${{ env.REPO_NAME }}-example.jar -t ghcr.io/ort-devops-2023s2g1/${{ env.REPO_NAME }}-example:${{ github.sha }} . 
      #     docker images
      #     docker push ghcr.io/ort-devops-2023s2g1/${{ env.REPO_NAME }}-example:${{ github.sha }}
    
