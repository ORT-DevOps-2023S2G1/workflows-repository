name: CI Reusable workflow

on:
  workflow_call:

env:
  REPOS_TOKEN: ${{ secrets.MG_TOKEN }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  POSTMAN_API_KEY: ${{ secrets.POSTMAN_API_KEY }}
  GH_TOKEN: ${{ github.token }}
  REPO_NAME: ${{ github.event.repository.name }}
  APP_ARGS: 'http://localhost:8081 http://localhost:8082 http://localhost:8083'

jobs:
  build_analysis_job:

    runs-on: ubuntu-22.04
    
    name: Building with Maven and Code Analysis with SonarCloud
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          
      - name: Code Analysis with SonarCloud
        run: |
          mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.token=${{ env.SONAR_TOKEN }}  
      
      - name: Building with Maven
        run: |
          mvn clean
          mvn package

      - name: Upload Artifact with JAR file
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.REPO_NAME }}-JAR-${{ github.run_id }}
          path: target/${{ env.REPO_NAME }}-example.jar
  
  orders_test_job:
    if: ${{ env.REPO_NAME }} == 'orders-service'
    needs: build_analysis_job
    runs-on: ubuntu-22.04
    
    name: Postman Test for ${{ env.REPO_NAME }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Building environment
        run: | 
          gh repo clone ORT-DevOps-2023S2G1/orders-service
          mvn -f orders-service/ -B package
          java -jar orders-service/target/orders-service-example.jar ${{ env.APP_ARGS }} --server.port=8080 &
          gh repo clone ORT-DevOps-2023S2G1/payments-service
          mvn -f payments-service/ -B package
          java -jar payments-service/target/payments-service-example.jar --server.port=8081 &
          gh repo clone ORT-DevOps-2023S2G1/shipping-service
          mvn -f shipping-service/ -B package
          java -jar shipping-service/target/shipping-service-example.jar --server.port=8082 &
          gh repo clone ORT-DevOps-2023S2G1/products-service
          mvn -f products-service/ -B package
          java -jar products-service/target/products-service-example.jar --server.port=8083 &

      - name: Install Postman CLI
        run: curl -o- "https://dl-cli.pstmn.io/install/linux64.sh" | sh

      - name: Login to Postman CLI
        run:  postman login --with-api-key ${{ env.POSTMAN_API_KEY }}

      - name: Get Postman JSON File 
        run: |
          curl -H 'Authorization: token ${{ env.REPOS_TOKEN }}' \
          -H 'Accept: application/vnd.github.v3.raw' \
          -O \
          -L 'https://api.github.com/repos/ORT-DevOps-2023S2G1/workflows-repository/contents/postman-test/orders-service.postman_collection.json' 
          
      - name: Run API tests using Postman CLI
        run: postman collection run orders-service.postman_collection.json

  test_job:
    if: ${{ env.REPO_NAME }} != 'orders-service'
    needs: build_analysis_job
    runs-on: ubuntu-22.04
    
    name: Postman Test for ${{ env.REPO_NAME }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Building environment
        run: | 
          gh repo clone ORT-DevOps-2023S2G1/${{ env.REPO_NAME }}
          mvn -f ${{ env.REPO_NAME }}/ -B package
          java -jar ${{ env.REPO_NAME }}/target/${{ env.REPO_NAME }}-example.jar --server.port=8080 &

      - name: Install Postman CLI
        run: curl -o- "https://dl-cli.pstmn.io/install/linux64.sh" | sh

      - name: Login to Postman CLI
        run:  postman login --with-api-key ${{ env.POSTMAN_API_KEY }}

      - name: Get Postman JSON File 
        run: |
          curl -H 'Authorization: token ${{ env.REPOS_TOKEN }}' \
          -H 'Accept: application/vnd.github.v3.raw' \
          -O \
          -L 'https://api.github.com/repos/ORT-DevOps-2023S2G1/workflows-repository/contents/postman-test/${{ env.REPO_NAME }}.postman_collection.json' 
          
      - name: Run API tests using Postman CLI
        run: postman collection run ${{ env.REPO_NAME }}.postman_collection.json

  build_push_docker_image_with_args:  
    if: github.event.repository.name == 'orders-service'
    needs: orders_test_job
    runs-on: ubuntu-22.04
    
    name: Build Docker Image with args
    steps:
      
      - name: Get Dockerfile
        run: |
          curl -H 'Authorization: token ${{ env.REPOS_TOKEN }}' \
          -H 'Accept: application/vnd.github.v3.raw' \
          -O \
          -L 'https://api.github.com/repos/ORT-DevOps-2023S2G1/workflows-repository/contents/dockerfiles/dockerfile_args'

      - name: Download artifact with JAR file
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.REPO_NAME }}-JAR-${{ github.run_id }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Push image to AWS ECR
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 637483454218.dkr.ecr.us-east-1.amazonaws.com
          docker build --build-arg JAR_FILE=${{ env.REPO_NAME }}-example.jar -t aws-ecr-${{ env.REPO_NAME }}:${{ github.run_id }} . --file Dockerfile_args
          docker tag aws-ecr-${{ env.REPO_NAME }}:${{ github.run_id }} 637483454218.dkr.ecr.us-east-1.amazonaws.com/aws-ecr-${{ env.REPO_NAME }}:${{ github.run_id }}
          docker push 637483454218.dkr.ecr.us-east-1.amazonaws.com/aws-ecr-${{ env.REPO_NAME }}:${{ github.run_id }}
          

          
  build_push_docker_image_without_args:
    if: github.event.repository.name != 'orders-service'
    needs: test_job
    runs-on: ubuntu-22.04
    
    name: Build Docker Image without args
    steps:
      
      - name: Get Dockerfile
        run: |
          curl -H 'Authorization: token ${{ env.REPOS_TOKEN }}' \
          -H 'Accept: application/vnd.github.v3.raw' \
          -O \
          -L 'https://api.github.com/repos/ORT-DevOps-2023S2G1/workflows-repository/contents/dockerfiles/dockerfile_no_args'

      - name: Download artifact with JAR file
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.REPO_NAME }}-JAR-${{ github.run_id }}
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Push image to AWS ECR
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 637483454218.dkr.ecr.us-east-1.amazonaws.com
          docker build --build-arg JAR_FILE=${{ env.REPO_NAME }}-example.jar -t aws-ecr-${{ env.REPO_NAME }}:${{ github.run_id }} . --file Dockerfile_no_args
          docker tag aws-ecr-${{ env.REPO_NAME }}:${{ github.run_id }} 637483454218.dkr.ecr.us-east-1.amazonaws.com/aws-ecr-${{ env.REPO_NAME }}:${{ github.run_id }}
          docker push 637483454218.dkr.ecr.us-east-1.amazonaws.com/aws-ecr-${{ env.REPO_NAME }}:${{ github.run_id }}
        
